trigger:
- master

parameters:
  - name: environment
    displayName: Target Environment
    type: string
    default: prod
    values:
      - dev
      - prod

# variables set on azdevops to avoid circular dependency warning
# $(DEFAULT_BRANCH)
# $(MY_INDEX)
# $(BLOB_CONTAINER_NAME)
variables:
  ${{ if eq(parameters['environment'], 'dev') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    STORAGE_ACCOUNT_NAME: $(DEV_STORAGE_ACCOUNT_NAME)
    PROFILE_CDN_NAME: $(DEV_PROFILE_CDN_NAME)
    ENDPOINT_NAME: $(DEV_ENDPOINT_NAME)
    RESOURCE_GROUP_NAME: $(DEV_RESOURCE_GROUP_NAME)
  ${{ if eq(parameters['environment'], 'prod') }}:
    AZURE_SUBSCRIPTION: $(PROD_AZURE_SUBSCRIPTION)
    STORAGE_ACCOUNT_NAME: $(PROD_STORAGE_ACCOUNT_NAME)
    PROFILE_CDN_NAME: $(PROD_PROFILE_CDN_NAME)
    ENDPOINT_NAME: $(PROD_ENDPOINT_NAME)
    RESOURCE_GROUP_NAME: $(PROD_RESOURCE_GROUP_NAME)

pool:
  vmImage: 'ubuntu-latest'

stages:

  # Prepare Artifact with application bundle
  - stage: Build
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: 'make_build'
        steps:
        
          - task: UseRubyVersion@0
            inputs:
              versionSpec: '>= 2.6.4'
          
          - script: |
              gem install jekyll bundler
              bundle install --retry=3 --jobs=4
            displayName: 'bundle install'

          - script: |
              bundle install
              bundle exec jekyll build --config _config.yml,_config_production.yml
            displayName: 'jekyll'

          - task: CopyFiles@2
            displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
            inputs:
              SourceFolder: '_site'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: Bundle
              parallel: true
              parallelCount: 128

  # Deploy 
  - stage: 'Deploy_to_${{ parameters.environment }}'
    dependsOn:
      - Build
    pool:
      vmImage: 'windows-2019'
    jobs:
      - job: 'deploy_to_container'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle
          
          - task: AzureCLI@1
            displayName: 'Sync Storage'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptLocation: inlineScript
              inlineScript: |
                call az storage blob sync --container $(BLOB_CONTAINER_NAME) --account-name $(STORAGE_ACCOUNT_NAME) -s "$(Pipeline.Workspace)\Bundle"

          - task: AzureCLI@1
            displayName: 'Purge CDN'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptLocation: inlineScript
              inlineScript: |
                call az cdn endpoint purge -g $(RESOURCE_GROUP_NAME) -n $(ENDPOINT_NAME) --profile-name $(PROFILE_CDN_NAME) --content-paths "/*"
