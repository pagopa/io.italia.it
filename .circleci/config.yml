# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
defaults: &defaults
  working_directory: /home/circleci/italia-landing
  docker:
    - image: circleci/ruby:2.4.1-node
      environment:
        BUNDLE_JOBS: 3
        BUNDLE_RETRY: 3
        BUNDLE_PATH: vendor/bundle
        JEKYLL_ENV: production
        WEBSITE_BRANCH: gh-pages
        GIT_USER_EMAIL: "cittadinanzadigitale@italia.it"

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Install dependencies
          command: bundle install

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: Build jekyll website
          command: bundle exec jekyll build

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - italia-landing
            # the following setting is needed in order to avoid errors
            #  with known_hosts during the deploy job (git push)
            - .ssh

      - store_artifacts:
          path: /home/circleci/italia-landing/_site

  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /home/circleci
      - run:
          name: Run htmlproofer
          command: bundle exec htmlproofer ./_site --check-html --allow-hash-href --only-4xx --alt-ignore '/.*/'

  deploy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /home/circleci

      - run:
          name: Push website to GitHub
          command: bash ./deploy.sh

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          filters:
            branches:
              only: master
      # TODO
      # - test:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only: master
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
